require 'logger'

case (Rails::VERSION::MAJOR rescue 2)
when 3
  # SQL logging
  ActiveRecord::Base.logger = Logger.new(STDOUT)
  ActiveRecord::Base.clear_reloadable_connections!

  # Controller logging
  ActionController::Base.logger = Logger.new(STDOUT)
  
  # PolarisResource logging
  PolarisResource::Configuration.logger = Logger.new(STDOUT) if defined?(PolarisResource)

  # URL Helpers for ActionController
  include Rails.application.routes.url_helpers
  default_url_options[:host] = Rails.application.class.parent_name.downcase

  # Routes convenience method
  def routes
    Rails.application.routes.routes.inject({}) { |table, route|
      table.store(route.name, "#{route.verb || 'ANY'} #{route.path}")
      table
    }
  end

  # PROMPT
  app_name = Rails.application.class.parent_name.downcase
  app_env  = Rails.env[0...3]
  IRB.conf[:PROMPT] ||= {}
  IRB.conf[:PROMPT][:RAILS] = {
    :PROMPT_I => "#{ app_name }(#{ app_env })> ",
    :PROMPT_N => "#{ app_name }(#{ app_env })| ",
    :PROMPT_C => "#{ app_name }(#{ app_env })| ",
    :PROMPT_S => "#{ app_name }(#{ app_env })%l ",
    :RETURN => "=> %s\n",
    :AUTO_INDENT => true,
  }
  IRB.conf[:PROMPT_MODE] = :RAILS
  
  # Execute arbitrary SQL
  def sql(query)
    ActiveRecord::Base.connection.select_all(query)
  end
when 2
  # SQL logging
  Object.const_set('RAILS_DEFAULT_LOGGER', Logger.new(STDOUT))
end